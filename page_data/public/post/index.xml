<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on adrian</title>
    <link>https://adrian83.github.io/post/</link>
    <description>Recent content in Posts on adrian</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 30 May 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://adrian83.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Kubernates demo on Google Cloud Platform</title>
      <link>https://adrian83.github.io/post/005_kubernates_demo_on_gcp/</link>
      <pubDate>Sat, 30 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://adrian83.github.io/post/005_kubernates_demo_on_gcp/</guid>
      <description>After playing a bit with Minikube I wanted to build something on a real Kubernetes cluster. From few Kubernetes as a Service options I&amp;rsquo;ve chosen Google Kubernetes Engine available on Google Cloud Platform. Below you can see how to deploy web application in few simple steps. The full source code with instructions, how to run and test it, can be found here.
Prerequisites Before you start make sure, you meet the following requirements:</description>
    </item>
    
    <item>
      <title>Decorators in Python</title>
      <link>https://adrian83.github.io/post/006_decorators_in_python/</link>
      <pubDate>Mon, 18 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://adrian83.github.io/post/006_decorators_in_python/</guid>
      <description>Decorators in Python are very powerful and elegant way to wrap functions and classes with custom code. In that code you can modify function arguments, returned values or ever block wrapped function from execution. Introduction In this post we will see, how to create decorators implemented as functions as well as classes. We will also see, that decorators themselves can have parameters and how multiple decorators behave on a single function.</description>
    </item>
    
    <item>
      <title>Run code in Docker container</title>
      <link>https://adrian83.github.io/post/003_run_code_in_docker_container/</link>
      <pubDate>Mon, 27 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://adrian83.github.io/post/003_run_code_in_docker_container/</guid>
      <description>Running your code inside of Docker container can save you from installing, sometimes very complex, tree of dependencies on your local computer. Introduction Following post presents a few steps, that will allow you to run your applications / scripts in an interactive way inside the Docker container.
First let&amp;rsquo;s look at the general command for running Docker containers:
docker run [OPTIONS] IMAGE[:TAG|@DIGEST] [COMMAND] [ARG...]
Using this command we can run our first example which in this case is echo command:</description>
    </item>
    
    <item>
      <title>Building Serverless API on AWS</title>
      <link>https://adrian83.github.io/post/004_serverless_api_on_aws/</link>
      <pubDate>Sun, 15 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://adrian83.github.io/post/004_serverless_api_on_aws/</guid>
      <description>Writing serverless applications on AWS can be really easy. Below you can find description of how to build simplified CRUD application for user management. The full source code with instructions, how to run and test it, can be found here.
Infrastructure as a Code Knowledge of programming language and few CloudFormation resources is all, that you need to build simple Serverless application. First skill will be used to implement code executed by Lambda functions and the second to create infrastructure.</description>
    </item>
    
    <item>
      <title>Go and JSON</title>
      <link>https://adrian83.github.io/post/002_go_and_json/</link>
      <pubDate>Thu, 16 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://adrian83.github.io/post/002_go_and_json/</guid>
      <description>Transforming data structures into JSON and the other way around is something, that is done quite often when creating APIs. Below you can find a few, in my opinion, most frequent transformations to and from JSON written in Go programming language. Introduction In this post we will see, how to marshal and unmarshal JSON into Go structures. We will see two most common cases where JSON and Go structures have compatible types and when the transformation is done by implementing custom logic.</description>
    </item>
    
    <item>
      <title>Running Dashboard in Minikube</title>
      <link>https://adrian83.github.io/post/001_minikube-dashboard/</link>
      <pubDate>Sun, 22 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://adrian83.github.io/post/001_minikube-dashboard/</guid>
      <description>To install and access Kubernetes Web UI (called Dashboard), you need to go through few simple steps. Make sure your Minikube cluster is started by running minikube status.
If it is not running start it with minikube start.
First we have to define user, that will have permission to access Dashboard. For that create file dashboard-adminuser.yaml with content:
apiVersion: v1 kind: ServiceAccount metadata: name: admin-user namespace: kubernetes-dashboard Next we need to bind previously defined user to role, which will allow accessing dashboard.</description>
    </item>
    
    <item>
      <title>Just a test</title>
      <link>https://adrian83.github.io/post/000_test/</link>
      <pubDate>Wed, 13 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://adrian83.github.io/post/000_test/</guid>
      <description>TEST </description>
    </item>
    
  </channel>
</rss>