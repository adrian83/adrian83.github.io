<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>adrian</title>
    <link>https://adrian83.github.io/</link>
    <description>Recent content on adrian</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 22 Dec 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://adrian83.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>About</title>
      <link>https://adrian83.github.io/page/about/</link>
      <pubDate>Tue, 23 Apr 2019 17:48:02 +0200</pubDate>
      
      <guid>https://adrian83.github.io/page/about/</guid>
      <description>Father of two adorable children. Programming enthusiast. Backend developer with several years of commercial experience. Lifelong learner.</description>
    </item>
    
    <item>
      <title>Running Dashboard in Minikube</title>
      <link>https://adrian83.github.io/post/minikube-dashboard/</link>
      <pubDate>Sun, 22 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://adrian83.github.io/post/minikube-dashboard/</guid>
      <description>To install and access Kubernetes Web UI (called Dashboard), you need to go through few simple steps. Make sure your Minikube cluster is started by running minikube status.
If it is not running start it with minikube start.
Create file dashboard-adminuser.yaml with content:
apiVersion: v1 kind: ServiceAccount metadata: name: admin-user namespace: kubernetes-dashboard Create file dashboard-clusterrolebinding.yaml with content:
apiVersion: rbac.authorization.k8s.io/v1 kind: ClusterRoleBinding metadata: name: admin-user roleRef: apiGroup: rbac.authorization.k8s.io kind: ClusterRole name: cluster-admin subjects: - kind: ServiceAccount name: admin-user namespace: kubernetes-dashboard Apply both files by executing:</description>
    </item>
    
    <item>
      <title>Just a test</title>
      <link>https://adrian83.github.io/post/test/</link>
      <pubDate>Wed, 13 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://adrian83.github.io/post/test/</guid>
      <description> TEST </description>
    </item>
    
    <item>
      <title></title>
      <link>https://adrian83.github.io/page/architect/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://adrian83.github.io/page/architect/</guid>
      <description> AWS Certified Solutions Architect - Professional 
Exam guide

Core Services:
 IAM S3 EC2 EBS Auto Scaling ELB Cloudwatch VPC  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://adrian83.github.io/page/architect/001_iam/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://adrian83.github.io/page/architect/001_iam/</guid>
      <description>IAM Menu &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; S3 &amp;gt;&amp;gt;
Best practices:
 Lock away your AWS Account Root Access Keys.
 Create individual IAM Users.
 Configure strong pasword policy for your users.
 Rotate credentials regularly.
 Remove unnecessary credentials.
 Enable Multi-Factor Authentication (MFA) for priviliged users.
 Use Groups to assign permissions to IAM Users.
 Use AWS Defined Policies to assign permissions whenever possible.
 Use Policy Conditions for Extra security.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://adrian83.github.io/page/architect/002_s3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://adrian83.github.io/page/architect/002_s3/</guid>
      <description>S3 &amp;lt;&amp;lt; IAM &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Menu &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; EC2 &amp;gt;&amp;gt;
Whitepaper 
Main features:
 Durability (99.999999999%) Availability (99.99%) Scalability Reliability Fast Inexpensiv Secure Flexible Storage Management Easy interface for data Easy integration  Use cases:
 Data backup Data archiving Disaster recovery  TODO: Review S3 documentation Recap:
 Cross-Region Replication Storage classes Bucket policy and access controll list Events Logging  Types of Cloud Storage There are three types of cloud storage: Object, File, and Block.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://adrian83.github.io/page/architect/003_ec2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://adrian83.github.io/page/architect/003_ec2/</guid>
      <description>EC2 (Elastic Compute Cloud) &amp;lt;&amp;lt; S3 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Menu &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; EBS &amp;gt;&amp;gt;
Purchase options:
 On demand Spot Reserved Scheduled  Dedicated host - ?
Dedicated instance - ?
Instance store - ?
Key pair - ?
Elastic IP address - ?
AMI - ?
&amp;lt;&amp;lt; S3 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Menu &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; EBS &amp;gt;&amp;gt;</description>
    </item>
    
    <item>
      <title></title>
      <link>https://adrian83.github.io/page/architect/004_ebs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://adrian83.github.io/page/architect/004_ebs/</guid>
      <description>EBS (Elastic Block Store) &amp;lt;&amp;lt; EC2 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Menu &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Auto Scaling &amp;gt;&amp;gt;
EBS is a persisten block storage volumes which can be used (attached) by EC2. Volumes can be detached and attached between EC2 instances.
Volumes:
 Magnetic HDD - throughput optimized
 General purpose SSD - IO (read / write) optimized, max iops per volume is 16 000
 Provisioned IOPS SSD - low latency, high throughput, max iops per volume is 64 000  Snapshot is a point in time backup (stored in s3) of the data from EBS volume.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://adrian83.github.io/page/architect/005_autoscaling/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://adrian83.github.io/page/architect/005_autoscaling/</guid>
      <description>Auto Scaling &amp;lt;&amp;lt; EBS &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Menu &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ELB &amp;gt;&amp;gt;
AWS Auto Scaling monitors your applications and automatically adjusts capacity to maintain steady, predictable performance at the lowest possible cost.
Components:
 Launch Configuration
 Auto Scaling Group
 Scaling Options  Termination logic:
&amp;lt;&amp;lt; EBS &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Menu &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ELB &amp;gt;&amp;gt;</description>
    </item>
    
    <item>
      <title></title>
      <link>https://adrian83.github.io/page/architect/006_elb/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://adrian83.github.io/page/architect/006_elb/</guid>
      <description>ELB (Elastic Load Balancing) &amp;lt;&amp;lt; Auto Scaling &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Menu &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Cloudwatch &amp;gt;&amp;gt;
Elastic Load Balancing automatically distributes incoming application traffic across multiple targets, such as Amazon EC2 instances, containers, IP addresses, and Lambda functions. It can handle the varying load of your application traffic in a single Availability Zone or across multiple Availability Zones. Elastic Load Balancing offers three types of load balancers that all feature the high availability, automatic scaling, and robust security necessary to make your applications fault tolerant.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://adrian83.github.io/page/architect/007_cloudwatch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://adrian83.github.io/page/architect/007_cloudwatch/</guid>
      <description>Cloudwatch &amp;lt;&amp;lt; ELB &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Menu &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; VPC &amp;gt;&amp;gt;
Elastic Load Balancing automatically distributes incoming application traffic across multiple targets, such as Amazon EC2 instances, containers, IP addresses, and Lambda functions. It can handle the varying load of your application traffic in a single Availability Zone or across multiple Availability Zones. Elastic Load Balancing offers three types of load balancers that all feature the high availability, automatic scaling, and robust security necessary to make your applications fault tolerant.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://adrian83.github.io/page/architect/008_vpc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://adrian83.github.io/page/architect/008_vpc/</guid>
      <description>VPC (Virtual PrivateCloud) Documentation &amp;lt;&amp;lt; Cloudwatch &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Menu &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ?? &amp;gt;&amp;gt;
Amazon Virtual Private Cloud (Amazon VPC) lets you provision a logically isolated section of the AWS Cloud where you can launch AWS resources in a virtual network that you define. You have complete control over your virtual networking environment, including selection of your own IP address range, creation of subnets, and configuration of route tables and network gateways. You can use both IPv4 and IPv6 in your VPC for secure and easy access to resources and applications.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://adrian83.github.io/page/architect/900_exam/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://adrian83.github.io/page/architect/900_exam/</guid>
      <description>Exam Guide &amp;lt;&amp;lt; Back
   Domain % of Examination     1. Design for Organizational Complexity 12.5%   2. Design for New Solutions 31%   3. Migration Planning 15%   4. Cost Control 12.5%   5. Continuous Improvement for Existing Solutions 29%   TOTAL 100%    
Domain 1: Design for Organizational Complexity 
1.1. Determine cross-account authentication and access strategy for complex organizations (for example, an organization with varying compliance requirements, multiple business units, and varying scalability requirements).</description>
    </item>
    
  </channel>
</rss>