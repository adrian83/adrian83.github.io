<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>decorators on adrian</title>
    <link>https://adrian83.github.io/categories/decorators/</link>
    <description>Recent content in decorators on adrian</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 18 May 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://adrian83.github.io/categories/decorators/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Decorators in Python</title>
      <link>https://adrian83.github.io/post/006_decorators_in_python/</link>
      <pubDate>Mon, 18 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://adrian83.github.io/post/006_decorators_in_python/</guid>
      <description>Decorators in Python are very powerful and elegant way to wrap functions and classes with custom code. In that code you can modify function arguments, returned values or ever block wrapped function from execution. Introduction In this post we will see, how to create decorators implemented as functions as well as classes. We will also see, that decorators themselves can have parameters and how multiple decorators behave on a single function.</description>
    </item>
    
  </channel>
</rss>
