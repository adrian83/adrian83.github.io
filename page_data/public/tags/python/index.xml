<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>python on adrian</title>
    <link>https://adrian83.github.io/tags/python/</link>
    <description>Recent content in python on adrian</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 18 May 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://adrian83.github.io/tags/python/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Decorators in Python</title>
      <link>https://adrian83.github.io/post/006_decorators_in_python/</link>
      <pubDate>Mon, 18 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://adrian83.github.io/post/006_decorators_in_python/</guid>
      <description>Decorators in Python are very powerful and elegant way to wrap functions and classes with custom code. In that code you can modify function arguments, returned values or ever block wrapped function from execution. Introduction In this post we will see, how to create decorators implemented as functions as well as classes. We will also see, that decorators themselves can have parameters and how multiple decorators behave on a single function.</description>
    </item>
    
    <item>
      <title>Run code in Docker container</title>
      <link>https://adrian83.github.io/post/003_run_code_in_docker_container/</link>
      <pubDate>Mon, 27 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://adrian83.github.io/post/003_run_code_in_docker_container/</guid>
      <description>Running your code inside of Docker container can save you from installing, sometimes very complex, tree of dependencies on your local computer. Introduction Following post presents a few steps, that will allow you to run your applications / scripts in an interactive way inside the Docker container.
First let&amp;rsquo;s look at the general command for running Docker containers:
docker run [OPTIONS] IMAGE[:TAG|@DIGEST] [COMMAND] [ARG...]
Using this commmand we can run our first example which in this case is echo command:</description>
    </item>
    
    <item>
      <title>Building Serverless API on AWS</title>
      <link>https://adrian83.github.io/post/004_serverless_api_on_aws/</link>
      <pubDate>Sun, 15 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://adrian83.github.io/post/004_serverless_api_on_aws/</guid>
      <description>Writing serverless applications on AWS can be really easy. Below you can find description of how to build simplified CRUD application for user management. The full source code with instructions, how to run and test it, can be found here.
Infrastructure as a Code Knowledge of programming language and few CloudFormation resources is all, that you need to build simple Serverless application. First skill will be used to implement code executed by Lambda functions and the second to create infrastructure.</description>
    </item>
    
  </channel>
</rss>