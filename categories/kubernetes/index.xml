<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>kubernetes on adrian</title>
    <link>https://adrian83.github.io/categories/kubernetes/</link>
    <description>Recent content in kubernetes on adrian</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 30 May 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://adrian83.github.io/categories/kubernetes/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Kubernates demo on Google Cloud Platform</title>
      <link>https://adrian83.github.io/post/005_kubernates_demo_on_gcp/</link>
      <pubDate>Sat, 30 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://adrian83.github.io/post/005_kubernates_demo_on_gcp/</guid>
      <description>After playing a bit with Minikube I wanted to build something on a real Kubernetes cluster. From few Kubernetes as a Service options I&amp;rsquo;ve chosen Google Kubernetes Engine available on Google Cloud Platform. Below you can see how to deploy web application in few simple steps. The full source code with instructions, how to run and test it, can be found here.
Prerequisites Before you start make sure, you meet the following requirements:</description>
    </item>
    
    <item>
      <title>Running Dashboard in Minikube</title>
      <link>https://adrian83.github.io/post/001_minikube-dashboard/</link>
      <pubDate>Sun, 22 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://adrian83.github.io/post/001_minikube-dashboard/</guid>
      <description>To install and access Kubernetes Web UI (called Dashboard), you need to go through few simple steps. Make sure your Minikube cluster is started by running minikube status.
If it is not running start it with minikube start.
First we have to define user, that will have permission to access Dashboard. For that create file dashboard-adminuser.yaml with content:
apiVersion: v1 kind: ServiceAccount metadata: name: admin-user namespace: kubernetes-dashboard Next we need to bind previously defined user to role, which will allow accessing dashboard.</description>
    </item>
    
  </channel>
</rss>